@use "sass:map";
@use "@angular/material" as mat;

@mixin _module-color($name, $theme) {
  @if $name == "all" {
    @include mat.all-component-colors($theme);
  } @else if $name == "autocomplete" {
    @include mat.autocomplete-color($theme);
  } @else if $name == "badge" {
    @include mat.badge-color($theme);
  } @else if $name == "bottom-sheet" {
    @include mat.bottom-sheet-color($theme);
  } @else if $name == "button" {
    @include mat.button-color($theme);
  } @else if $name == "button-toggle" {
    @include mat.button-toggle-color($theme);
  } @else if $name == "card" {
    @include mat.card-color($theme);
  } @else if $name == "checkbox" {
    @include mat.checkbox-color($theme);
  } @else if $name == "chips" {
    @include mat.chips-color($theme);
  } @else if $name == "core" {
    @include mat.elevation-classes();
    @include mat.app-background();
  } @else if $name == "datepicker" {
    @include mat.datepicker-color($theme);
  } @else if $name == "dialog" {
    @include mat.dialog-color($theme);
  } @else if $name == "divider" {
    @include mat.divider-color($theme);
  } @else if $name == "expansion" {
    @include mat.expansion-color($theme);
  } @else if $name == "fab" {
    @include mat.fab-color($theme);
  } @else if $name == "form-field" {
    @include mat.form-field-color($theme);
  } @else if $name == "grid-list" {
    @include mat.grid-list-color($theme);
  } @else if $name == "icon" {
    @include mat.icon-color($theme);
  } @else if $name == "icon-button" {
    @include mat.icon-button-color($theme);
  } @else if $name == "input" {
    @include mat.input-color($theme);
  } @else if $name == "list" {
    @include mat.list-color($theme);
  } @else if $name == "menu" {
    @include mat.menu-color($theme);
  } @else if $name == "paginator" {
    @include mat.paginator-color($theme);
  } @else if $name == "progress-bar" {
    @include mat.progress-bar-color($theme);
  } @else if $name == "progress-spinner" {
    @include mat.progress-spinner-color($theme);
  } @else if $name == "radio" {
    @include mat.radio-color($theme);
  } @else if $name == "select" {
    @include mat.select-color($theme);
  } @else if $name == "sidenav" {
    @include mat.sidenav-color($theme);
  } @else if $name == "slide-toggle" {
    @include mat.slide-toggle-color($theme);
  } @else if $name == "slider" {
    @include mat.slider-color($theme);
  } @else if $name == "snack-bar" {
    @include mat.snack-bar-color($theme);
  } @else if $name == "sort" {
    @include mat.sort-color($theme);
  } @else if $name == "stepper" {
    @include mat.stepper-color($theme);
  } @else if $name == "table" {
    @include mat.table-color($theme);
  } @else if $name == "tabs" {
    @include mat.tabs-color($theme);
  } @else if $name == "toolbar" {
    @include mat.toolbar-color($theme);
  } @else if $name == "tooltip" {
    @include mat.tooltip-color($theme);
  } @else if $name == "tree" {
    @include mat.tree-color($theme);
  }
}

@mixin _module-colors($theme, $config) {
  $modules: map.get($config, "modules") or ("all");
  @each $name in $modules {
    @include _module-color($name, $theme);
  }
}

@function _build-color-arg($config, $palette-key) {
  @return (color: map.get($config, $palette-key));
}

/// Includes just the colors for a dark theme.
///
/// @param {Map} $config - The config object used for multiple mixins in this library. See the example in [`mixin-full-theming()`](#mixin-full-theming) for a description of all its options.
/// @param {String} $palette-key ["dark-palettes"] - Which color to use from `$config`.
@mixin dark-theme-colors($config, $palette-key: "dark-palettes") {
  $theme: mat.m2-define-dark-theme(_build-color-arg($config, $palette-key));
  @include _module-colors($theme, $config);
}

/// Includes just the colors for a light theme.
///
/// @param {Map} $config - The config object used for multiple mixins in this library. See the example in [`mixin-full-theming()`](#mixin-full-theming) for a description of all its options.
/// @param {String} $palette-key ["light-palettes"] - Which color to use from `$config`.
@mixin light-theme-colors($config, $palette-key: "light-palettes") {
  $theme: mat.m2-define-light-theme(_build-color-arg($config, $palette-key));
  @include _module-colors($theme, $config);
}
