import { IfCouldBe, Nil, ObjectIteratee } from '../interfaces';

/**
 * Creates an object with the same keys as `object` and values generated by running each own enumerable string keyed property of `object` thru `iteratee`.
 *
 * Contribution to minified bundle size, when it is the only function imported:
 * - Lodash: 16,189 bytes
 * - Micro-dash: 120 bytes
 */
export function mapValues<A extends readonly any[], O>(
  array: A | Nil,
  iteratee: (item: A[number], index: number) => O,
): Record<number, O>;
export function mapValues<T, O>(
  object: T,
  iteratee: ObjectIteratee<NonNullable<T>, O>,
): IfCouldBe<T, Nil, {}> | Record<keyof NonNullable<T>, O>;
export function mapValues(object: any, iteratee: Function): any {
  let obj: any = {};
  Object.keys(object ?? obj).forEach(
    (key) => (obj[key] = iteratee(object[key], key)),
  );
  return obj;
}
